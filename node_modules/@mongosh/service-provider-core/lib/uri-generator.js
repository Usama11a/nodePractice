"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scheme = void 0;
const errors_1 = require("@mongosh/errors");
const i18n_1 = __importDefault(require("@mongosh/i18n"));
const connection_string_1 = require("./connection-string");
const index_1 = require("./index");
var Scheme;
(function (Scheme) {
    Scheme["Mongo"] = "mongodb://";
    Scheme["MongoSrv"] = "mongodb+srv://";
})(Scheme || (Scheme = {}));
exports.Scheme = Scheme;
const DEFAULT_HOST = '127.0.0.1';
const DEFAULT_PORT = '27017';
const CONFLICT = 'cli-repl.uri-generator.no-host-port';
const INVALID_HOST = 'cli-repl.uri-generator.invalid-host';
function validateConflicts(options) {
    if (options.host || options.port) {
        throw new errors_1.MongoshInvalidInputError(i18n_1.default.__(CONFLICT), errors_1.CommonErrors.InvalidArgument);
    }
}
function validateHost(host) {
    const invalidCharacter = host.match(/[^a-zA-Z0-9.:\[\]-]/);
    if (invalidCharacter) {
        throw new errors_1.MongoshInvalidInputError(i18n_1.default.__(INVALID_HOST) + ': ' + invalidCharacter[0], errors_1.CommonErrors.InvalidArgument);
    }
}
function generateHost(options) {
    if (options.host) {
        validateHost(options.host);
        if (options.host.includes(':')) {
            return options.host.split(':')[0];
        }
        return options.host;
    }
    return DEFAULT_HOST;
}
function generatePort(options) {
    if (options.host && options.host.includes(':')) {
        validateHost(options.host);
        const port = options.host.split(':')[1];
        if (!options.port || options.port === port) {
            return port;
        }
        throw new errors_1.MongoshInvalidInputError(i18n_1.default.__(CONFLICT), errors_1.CommonErrors.InvalidArgument);
    }
    return options.port ? options.port : DEFAULT_PORT;
}
function generateUri(options) {
    if (options.nodb) {
        return '';
    }
    const connectionString = generateUriNormalized(options);
    if (connectionString.hosts.every(host => ['localhost', '127.0.0.1'].includes(host.split(':')[0]))) {
        const params = connectionString.searchParams;
        if (!params.has('serverSelectionTimeoutMS')) {
            params.set('serverSelectionTimeoutMS', '2000');
        }
    }
    return connectionString.toString();
}
function generateUriNormalized(options) {
    var _a;
    const uri = options.connectionSpecifier;
    const replSetHostMatch = ((_a = options.host) !== null && _a !== void 0 ? _a : '').match(/^(?<replSetName>[^/]+)\/(?<hosts>([A-Za-z0-9.-]+(:\d+)?,?)+)$/);
    if (replSetHostMatch) {
        const { replSetName, hosts } = replSetHostMatch.groups;
        const connectionString = new connection_string_1.ConnectionString(`${Scheme.Mongo}replacemeHost/${encodeURIComponent(uri !== null && uri !== void 0 ? uri : index_1.DEFAULT_DB)}`);
        connectionString.hosts = hosts.split(',').filter(host => host.trim());
        connectionString.searchParams.set('replicaSet', replSetName);
        return addShellConnectionStringParameters(connectionString);
    }
    if (!uri) {
        return new connection_string_1.ConnectionString(`${Scheme.Mongo}${generateHost(options)}:${generatePort(options)}/?directConnection=true`);
    }
    if (uri.startsWith(Scheme.MongoSrv)) {
        validateConflicts(options);
        return new connection_string_1.ConnectionString(uri);
    }
    else if (uri.startsWith(Scheme.Mongo)) {
        validateConflicts(options);
        return addShellConnectionStringParameters(new connection_string_1.ConnectionString(uri));
    }
    const uriMatch = /^([A-Za-z0-9][A-Za-z0-9.-]+):?(\d+)?(?:\/(\S*))?$/gi;
    let parts = uriMatch.exec(uri);
    if (parts === null) {
        if (/[/\\. "$]/.test(uri)) {
            throw new errors_1.MongoshInvalidInputError(`Invalid URI: ${uri}`, errors_1.CommonErrors.InvalidArgument);
        }
        else {
            parts = [uri, uri];
        }
    }
    let host = parts === null || parts === void 0 ? void 0 : parts[1];
    const port = parts === null || parts === void 0 ? void 0 : parts[2];
    let dbAndQueryString = parts === null || parts === void 0 ? void 0 : parts[3];
    if (!port && !dbAndQueryString && host.indexOf('.') < 0) {
        dbAndQueryString = host;
        host = undefined;
    }
    if (host || port) {
        validateConflicts(options);
    }
    return addShellConnectionStringParameters(new connection_string_1.ConnectionString(`${Scheme.Mongo}${host || generateHost(options)}:${port || generatePort(options)}/${encodeURIComponent(dbAndQueryString || index_1.DEFAULT_DB)}`));
}
function addShellConnectionStringParameters(uri) {
    uri = uri.clone();
    const params = uri.searchParams;
    if (!params.has('replicaSet') && !params.has('directConnection') && uri.hosts.length === 1) {
        params.set('directConnection', 'true');
    }
    if (!params.has('tlsCertificateFile') && params.has('tlsCertificateKeyFile')) {
        params.set('tlsCertificateFile', params.get('tlsCertificateKeyFile'));
    }
    return uri;
}
exports.default = generateUri;
//# sourceMappingURL=uri-generator.js.map