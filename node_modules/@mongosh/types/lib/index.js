"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliUserConfigValidator = exports.CliUserConfig = exports.ShellUserConfigValidator = exports.ShellUserConfig = void 0;
class ShellUserConfig {
    constructor() {
        this.batchSize = 20;
        this.enableTelemetry = false;
    }
}
exports.ShellUserConfig = ShellUserConfig;
class ShellUserConfigValidator {
    static async validate(key, value) {
        switch (key) {
            case 'batchSize':
                if (typeof value !== 'number' || value <= 0) {
                    return `${key} must be a positive integer`;
                }
                return null;
            case 'enableTelemetry':
                if (typeof value !== 'boolean') {
                    return `${key} must be a boolean`;
                }
                return null;
            default:
                return `${key} is not a known config option`;
        }
    }
}
exports.ShellUserConfigValidator = ShellUserConfigValidator;
class CliUserConfig extends ShellUserConfig {
    constructor() {
        super(...arguments);
        this.userId = '';
        this.disableGreetingMessage = false;
        this.inspectCompact = 3;
        this.inspectDepth = 6;
        this.historyLength = 1000;
        this.showStackTraces = false;
    }
}
exports.CliUserConfig = CliUserConfig;
class CliUserConfigValidator extends ShellUserConfigValidator {
    static async validate(key, value) {
        switch (key) {
            case 'userId':
            case 'disableGreetingMessage':
                return null;
            case 'inspectCompact':
                if (typeof value !== 'boolean' && (typeof value !== 'number' || value < 0)) {
                    return `${key} must be a boolean or a positive integer`;
                }
                return null;
            case 'inspectDepth':
            case 'historyLength':
                if (typeof value !== 'number' || value < 0) {
                    return `${key} must be a positive integer`;
                }
                return null;
            case 'showStackTraces':
                if (typeof value !== 'boolean') {
                    return `${key} must be a boolean`;
                }
                return null;
            default:
                return super.validate(key, value);
        }
    }
}
exports.CliUserConfigValidator = CliUserConfigValidator;
//# sourceMappingURL=index.js.map